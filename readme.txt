1.何为堆栈？
　　堆HEAP与栈STACK是两个不同概念，其本质上都是一种数据结构。
　　栈是一种按数据项排列的数据结构，只能在一端（栈顶top）对数据项进行插入和删除，其符合后进先出（Last-In / First-Out）原则。栈（os）一般是由编译器自动分配释放，其使用的是一级缓存。
　　堆也是一种分配方式类似于链表的数据结构，其可以在任意位置对数据项进行操作。堆（os）一般由程序员手动分配释放，其使用的是二级缓存。
　　在嵌入式世界里，堆栈一般指的仅是栈。

2.作用与意义
　　在MCU中，栈这种结构一般被cpu和os所使用。
　　在cpu裸机中使用情况分两种：一、主动进行函数调用时，STACK用以暂存下一条指令地址、函数参数、函数中定义的局部变量；二、硬中断来临时，暂存当前执行的现场数据（下一条指令地址、各种缓存数据），中断结束后，用以恢复。
　　在os中使用时，硬栈的使用同cpu裸机；但os一般会为每个任务额外分配一个软栈，在任务调度时，可用软中断打断当前正在执行的任务，栈则用以保存各自任务以恢复。

3.软硬之分
　　硬件堆栈：是通过寄存器SP作为索引指针的地址，是调用了BL等函数调用指令后硬件自动填充的堆栈。
　　软件堆栈：是编译器为了处理一些参数传递而做的堆栈，会由编译器自动产生和处理，可以通过相应的编译选项对其进行编辑。
　　简单一点说，硬件堆栈主要做为地址堆栈用，而软件堆栈主要会被分配成数据堆栈。或看其栈顶指针是否和CPU具有特殊的关联，有关联者（如SP）“硬”，而无关联者“软”。

4.栈的纯C实现
　　基本的抽象数据类型（ADT）是编写C程序必要的过程，这类ADT有链表、堆栈、队列和树等，本节主要讲解下堆栈的几种实现方法以及他们的优缺点。
　　堆栈（stack）的显著特点是后进先出（Last-In First-Out, LIFO），其实现的方法有三种可选方案：静态数组、动态分配的数组、动态分配的链式结构。

静态数组：特点是要求结构的长度固定，而且长度在编译时候就得确定。其优点是结构简单，实现起来方便而不容易出错。而缺点就是不够灵活以及固定长度不容易控制，适用于知道明确长度的场合。
动态数组：特点是长度可以在运行时候才确定以及可以更改原来数组的长度。优点是灵活，缺点是由此会增加程序的复杂性。
链式结构：特点是无长度上线，需要的时候再申请分配内存空间，可最大程度上实现灵活性。缺点是链式结构的链接字段需要消耗一定的内存，在链式结构中访问一个特定元素的效率不如数组。

　　首先先确定一个堆栈接口的头文件，里面包含了各个方案下的函数原型，放在一起是为了实现程序的模块化以及便于修改。然后再接着分别介绍各个方案的具体实施方法。
	
	包含文件 stack.h、a_stack.c、d_stack.c、i_stack.c
